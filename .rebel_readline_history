1555280323525:(cljs/quit)
1555280332361:(cljs/exit\n \n ))
1555280338822:(cljs/quit)
1555280350216:cljs/exit
1555280353247:cljs/quit
1555280371032::cljs/quit
1555557192127:(defn test-string [] str "This test" "passed"\n  )
1555557206721:(defn test-string [] str "This test" "passed")
1555557214103:test-string
1555557219943:(test-string)
1555557263841:(defn test-string [] (str "This test" "passed"))
1555557272751:test-string
1555557276246:(test-string)
1555557990899:cljs/quit
1555557993774:(cljs/quit)
1555557999876::cljs/quit
1555562247861:cljsbuild once
1555562257027:lein
1555728626193:::
1555728631581::cclsclscljus/quit
1555728651387::cljs/quit
1555799914615:(def square {:stats (fn [] "Very square")})
1555799917392:square
1555799922456:sqaure :stats
1555799927399:square :stats
1555799976999:(square)
1555800226929:#(+ 6 %\n    ) 5
1555800246105:#(+ 6 % ) 5
1555801022102:(def square {:stats (fn [] "Very square")})
1555801110834:square :stats
1555801427586:println "test"
1555801569184:(defn tester [] \n  \n  \n  \n  \n  \n  \n  "Very square")
1555801578612:(defn tester [] "Very square")
1555801588387:(defn tester [] println "Very square")
1555801601364:(defn tester [] (println "Very square"))
1555801624587:#("string")
1555801644681:(fn [] "very square")
1555801662648:(get square :stats)
1555801713608:((get square :stats))
1555805712912:(def bobs [])
1555805845097:(for [i (range 10)] (conj bobs {:name "bob"))
1555805861837:(for [i (range 10)] (conj bobs {:name "bob"}))
1555805869393:bobs
1555806124648:(def bobs (for [i (range 10)] (conj bobs {:name "bob"})))
1555806126730:bobs
1555806163999:(def bobs (doseq [i (range 10)] (conj [] {:name "bob"})))
1555806184343:(def bobs (for [i (range 10)] (conj [] {:name "bob"})))
1555806202727:(for [i (range 10)] (conj [] {:name "bob"}))
1555806222975:(for [i (range 10)] (conj bobs {:name "bob"}))
1555806349646:((get square :stats))
1555806406072::cljs/quit
1555806615853:((get square :stats))
1555806618578:(for [i (range 10)] (conj bobs {:name "bob"}))
1555806632353:(for [i (range 10)] (conj [] {:name "bob"}))
1555806649930:(doseq [i (range 10)] (conj [] {:name "bob"}))
1555806669392:(def bobs (for [i (range 10)] (conj [] {:name "bob"})))
1555806672151:bobs
1555808611398:(def bobs (for [i (range 10)] (conj [] {:name "bob"})))
1555808612887:bobs
1555808633167:(def bobs (for [i (range 10)] (conj {} {:name "bob"})))
1555808634919:bobs
1555808671029:(def bobs (for [i (range 10)] (conj '[] {:name "bob"})))
1555808672789:bobs
1555814228282:(some? nil)
1555814234856:(some? 5)
1555824728684:(def vel-state (atom {}))
1555824781261:(swap! my-atom assoc :x false)
1555824816781:(swap! vel-state assoc :x false)
1555824823399:(swap! vel-state assoc :y false)
1555824827892:@vel-state
1555824831269:@vel-state :x
1555824845184:(@vel-state :x)
1555858342951:(def vel-state (atom {}))
1555858347149:(swap! vel-state assoc :y false)
1555861989819:([x y] })
1555862078525:([x y] {:x 0 :y 0})
1555862235147:(def my-map {})
1555862256478:(def my-map {:pos {:x 10 :y 11}})
1555863217307:(let [{{:keys [x y]} :pos} my-map]\n  println x " " y)
1555863241172:(let [{{:keys [x y]} :pos} my-map]\n  println x)
1555863260331:(let [{{:keys [x y]} :pos} my-map]\n  (println x " " y))
1555863352859:(def my-map {:pos {:x 10 :y 11} :r 10})
1555863356019:(let [{{:keys [x y]} :pos} my-map]\n  (println x " " y))
1555863398485:(let [{{:keys [x y]} :pos rad :r} my-map]\n  (println x " " y " " rad))
1555863405635:(def my-map {:pos {:x 10 :y 11} :r 15})
1555863407150:(let [{{:keys [x y]} :pos rad :r} my-map]\n  (println x " " y " " rad))
1555864058376::cljs/quit
1555865434743:(let [{{:keys [x y]} :pos rad :r} my-map]\n  (println x y rad))
1555865441212:(def my-map {:pos {:x 10 :y 11} :r 15})
1555865442770:(let [{{:keys [x y]} :pos rad :r} my-map]\n  (println x y rad))
1555887477432:(some? 0)
1555939788062::cljs/quit
1556145585970:"string"
1556145590643:("string")
1556145598858:(vector "string")
1556145619658:(nth (vector "string") 4)
1556145627762:(nth (vector "string") 0)
1556145662833:(seq "string")
1556197784117::cljs/quit
1556206711512:@messages
1556206721967:(@messages)
1556208643894:(str ["^ ","~:message","bites"])
1556208654085:(apply str ["^ ","~:message","bites"])
1556211750431:(bytes ["^ ","~:message","bites"])
1556211967967:(byte-array ["^ ","~:message","bites"])
1556244575433:(keys {:a 1})
1556244703790:(keys {~:a 1})
1556245724443:(type (keys {~:a 1}))
1556245729440:(type (keys {:a 1}))
1556245743958:(type (keys {"key" 1}))
1556245867177:(nth (type (keys {"key" 1})) 1)
1556245893895:(nth (keys {"key" 1}) 1)
1556245899584:(nth (keys {"key" 1}) 0)
1556245934296:(type (nth (keys {"key" 1})) 0)
1556245944463:(type (nth (keys {"key" 1})0 ))
1556247221075:(def string-map {"a" 1 "b" 2})
1556247229434:(string-map "a")
1556247245999:("a" string-map)
1556420404462:ls
1556451281543::cljs/quit
1556482092372:(nil? false)
1556482096361:(nil? 1)
1556482099313:(nil? 0)
1556482102616:(nil? nil)
1556482114287:(zero? 0)
1556511374793:(vec 0)
1556511486329:(take 4 (repeat 5))
1556511499416:(vec (take 4 (repeat 5)))
1556511586121:(vec (take 8 (repeat (take 6 (repeat 0)))))
1556511615063:(def pattern (vec (take 8 (repeat (take 6 (repeat 0))))))
1556511619574:pattern
1556511624920:(pattern)
1556511637383:(get pattern 2)
1556511651647:(get-in pattern [2 1])
1556511721400:(def patterns (vec (take 8 (repeat (take 6 (repeat 1))))))
1556511728917:(get-in patterns [2 1])
1556511785167:(def pattern (vec (take 8 (repeat (take 6 (repeat 0))))))
1556511788486:pattern
1556511823064:(vec (take 8 (repeat 1)))
1556511860992:(vec (take 8 (repeat (take 6 (1)))))
1556511868141:(vec (take 8 (repeat (take 6 1)))))
1556511884686:(vec (take 8 (repeat (take 6 (repeat 1)))))
1556541768654:(vec (take 8 (repeat (vec (take 6 (repeat 1))))))
1556541790334:(def pattern (vec (take 8 (repeat (vec take 6 (repeat 0)))))))
1556541808518:(def pattern (vec (take 8 (repeat (vec (take 6 (repeat 0)))))))
1556541813549:(get-in patterns [2 1])
1556541819821:(get-in pattern [2 1])
1556547216142:pattern
1556548099276:(assoc-in pattern [2 1] 3)
1556563280154:pattern
1556563285818:(def pattern (vec (take 8 (repeat (vec (take 6 (repeat 0)))))))
1556563288233:pattern
1556563291745:(assoc-in pattern [2 1] 3)
1556563295271:pattern
1556565331982:(zero? 0)
1556566033637:(def pattern-a (atom (vec (take 8 (repeat (vec (take 6 (repeat 0))))))))
1556566037692:pattern-a
1556566041925:@pattern-a
1556566050661:(@pattern-a)
1556567554135:range 5
1556567557879:(range 5)
1556572358883:(doseq [x (range 5) y (range 3)] (println x y))
1556572513634:(when (not (nil? nil)) (doseq [x (range 5) y (range 3)] (println x y)))
1556572572417:(doseq [x (range 5) y (range 3)] (when (not (nil? x)) (println x y)))
1556603304589:(assoc-in pattern [2 1] 3)
1556603317844:(def pattern (vec (take 8 (repeat (vec (take 6 (repeat 0)))))))
1556603319870:(assoc-in pattern [2 1] 3)
1556603384070:(assoc-in pattern [1 2] 3)
1556604201584:(range 7.8)
1556620423383:(pattern)
1556620440599:@pattern
1556620447220:(def pattern (vec (take 8 (repeat (vec (take 6 (repeat 0)))))))
1556620455934:@pattern
1556620467342:(pattern 2)
1556620485481:(pattern 2 4)
1556620497107:(get-in pattern [2 4])
1556620733960:((pattern 2) 4)
1556622518354::cljs/quit
